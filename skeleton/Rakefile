
BUILD_STATUS_FILE=".built"

class String
  attr_accessor :colour
  RESET="\e[00;m"

  def coloured(colour = nil)
    colour||=@colour
    "#{colour_code(colour)}#{self}#{RESET}"
  end

  private 
  def colour_code colour
    case colour
    when :red : "\e[01;31m"
    when :green : "\e[01;32m"
    end
  end
end

file BUILD_STATUS_FILE => Dir.glob("Classes/*.[hm]") + Dir.glob("UnitTests/*.m") do
  failure_lines, notice = test
  title = nil
  if not failure_lines.empty?
    title = 'Fail'
    lines = failure_lines.compact.compact.uniq
    errors = lines.reject { |l| l =~ /^Executed/ }
    notice = lines.select { |l| l =~ /^Executed/ }.last
    notice ||= errors.last
    errors.each do |line|
      growl title, line
    end
  else
    title = 'Pass'
  end
  growl title, notice
  File.open(BUILD_STATUS_FILE, 'w') do |f| 
    f.write("#{ title }: #{ notice }")
  end
end

task :remove_built_file do
  FileUtils.rm_f(BUILD_STATUS_FILE)
end

task :test_all=>[:remove_built_file, :test]

task :test=>[BUILD_STATUS_FILE] do
  out =  File.open('.built') {|f| f.read}
  print out.coloured(out =~ /Pass/ ? :green : :red) + "\n"
end



task :default => [:test]

def test
  version = ENV['VERSION'] || '2.1'
  output = `xcodebuild -target "Unit Test" -configuration Debug -sdk iphonesimulator#{ version }`
  failure_lines = []
  pass_line = ""
  output.each do |line|
    if line and line =~ /error:|^Executed.*(\d+) failures|ld returned 1 exit status|Bus error|Segmentation fault/
      if $1.nil? || $1.to_i > 0
        failure_lines << line.chomp
        line.colour = :red
      else
        pass_line = line.chomp # the last one is the one we want.
        line.colour = :green
      end
    end
    print line.coloured
  end
  [failure_lines, pass_line]
end

def growl title, msg =""
  if `which growlnotify` != ''
    img = "~/.autotest_images/#{title.downcase}.png"
    img_flag = " --image #{ img }" if File.exist?(File.expand_path(img))
    `growlnotify -n autotest #{img_flag} -p 0 -m #{msg.inspect} #{title}` rescue nil
  end
end
